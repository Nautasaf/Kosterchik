const express = require('express')
const router = express.Router()
const { Event, EventUser } = require('../db/models')

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
router.get('/', async (req, res) => {
  try {
    const events = await Event.findAll()
    res.json(events)
  } catch (error) {
    console.error(error)
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π' })
  }
})

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/user/:userId', async (req, res) => {
  try {
    const { userId } = req.params
    console.log('userId ===>', userId)

    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ EventUser –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const events = await Event.findAll({
      where: { userId },
    })

    res.status(200).json({ events })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})
// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ø–æ ID
router.get('/:eventId', async (req, res) => {
  try {
    const { eventId } = req.params
    const event = await Event.findByPk(eventId)

    if (!event) {
      return res.status(404).json({ message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' })
    }

    res.status(200).json(event)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error)
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
router.put('/:eventId', async (req, res) => {
  try {
    const { eventId } = req.params
    const { title, description, city, date, background, requirements } =
      req.body

    const event = await Event.findByPk(eventId)

    if (!event) {
      return res.status(404).json({ message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
    await event.update({
      title,
      description,
      city,
      date,
      background,
      requirements,
    })

    res.status(200).json(event)
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error)
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
router.delete('/:eventId', async (req, res) => {
  try {
    const { eventId } = req.params

    const event = await Event.findByPk(eventId)

    if (!event) {
      return res.status(404).json({ message: '–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' })
    }

    await event.destroy()

    res.status(200).json({ message: '–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:', error)
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

router.post('/', async (req, res) => {
  console.log("üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", req.body);

  try {
    const {
      title,
      description,
      city,
      date,
      userId,
      imageUrl,
      background,
      requirements,
      maxPeople,
      start_date,
      end_date,
      price,
      event_type,
      age_restriction,
      duration,
      district,
      format,
      language,
      accessibility,
      organizer,
    } = req.body
   
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ userId –ø–µ—Ä–µ–¥–∞–Ω –∏ –æ–Ω –Ω–µ —Ä–∞–≤–µ–Ω null
    if (!userId) {
      return res.status(400).json({ message: '–û—à–∏–±–∫–∞: userId –Ω–µ —É–∫–∞–∑–∞–Ω' })
    }
    console.log('userId===>', userId)

    // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const newEvent = await Event.create({
      title,
      description,
      city,
      date,
      userId,
      imageUrl,
      background,
      requirements,
      people: 1,
      maxPeople,
      start_date,
      end_date,
      price,
      event_type,
      age_restriction,
      duration,
      district,
      format,
      language,
      accessibility,
      organizer,
    })

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É EventUser
    await EventUser.create({
      userId: userId,
      eventId: newEvent.id,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    res.status(201).json(newEvent)
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", error });
  }
});

module.exports = router
